CREATE DATABASE Airport
USE Airport

CREATE TABLE Planes(
	Id INT PRIMARY KEY IDENTITY,
	[Name] CHAR(30) NOT NULL,
	Seats INT NOT NULL,
	[Range] INT NOT NULL 
)

CREATE TABLE Flights(
	Id INT PRIMARY KEY IDENTITY,
	DepartureTime DATETIME2,
	ArrivalTime DATETIME2,
	Origin CHAR(50) NOT NULL,
	Destination CHAR(50) NOT NULL,
	PlaneId INT FOREIGN KEY REFERENCES Planes(Id)
)

CREATE TABLE Passengers(
	Id INT PRIMARY KEY IDENTITY,
	FirstName CHAR(30) NOT NULL,
	LastName CHAR (30) NOT NULL,
	Age INT NOT NULL,
	Address CHAR (30) NOT NULL,
	PassportId CHAR(11) NOT NULL
)

CREATE TABLE LuggageTypes(
	Id INT PRIMARY KEY IDENTITY,
	[Type] CHAR(30) NOT NULL,
)

CREATE TABLE Luggages(
	Id INT PRIMARY KEY IDENTITY,
	LuggageTypeId INT FOREIGN KEY REFERENCES LuggageTypes(Id) NOT NULL,
	PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL
)

CREATE TABLE Tickets(
	Id INT PRIMARY KEY IDENTITY,
	PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL,
	FlightId INT FOREIGN KEY REFERENCES Flights(Id) NOT NULL,
	LuggageId INT FOREIGN KEY REFERENCES Luggages(Id) NOT NULL,
	Price DECIMAL(15,2) NOT NULL
)

INSERT INTO Planes([Name], Seats, [Range])
	VALUES ('Airbus 336', 112, 5132),
		   ('Airbus 330', 432, 5325),
		   ('Boeing 369', 231, 2355),
		   ('Stelt 297', 254, 2143),
		   ('Boeing 338', 165, 5111),
		   ('Airbus 558', 387, 1342),
		   ('Boeing 128', 345, 5541)

INSERT INTO LuggageTypes(Type)
	VALUES ('Crossbody Bag'),
		   ('School Backpack'),
		   ('Shoulder Bag')

SELECT * FROM Tickets AS t
JOIN Flights AS f ON t.FlightId = f.Id
WHERE Destination = 'Carlsbad'
UPDATE Tickets SET Price += Price * 0.13

SELECT * FROM Flights AS f
JOIN Tickets AS t ON t.FlightId = f.Id
WHERE Destination = 'Ayn Halagim'

DELETE FROM Tickets WHERE FlightId = 30
DELETE FROM Flights WHERE Destination = 'Ayn Halagim'

SELECT * FROM PLanes 
WHERE [Name] LIKE '%tr%'
ORDER BY Id, [Name], Seats, [Range]

SELECT FlightId, SUM(Price) AS Price FROM Tickets
GROUP BY FlightId
ORDER BY Price DESC, FlightId ASC

SELECT CONCAT(FirstName, ' ', LastName) AS [Full Name], Origin, Destination FROM Passengers AS p
JOIN Tickets AS t ON t.PassengerId = p.Id
JOIN Flights AS f ON f.Id = t.FlightId
ORDER BY [Full Name], Origin, Destination

SELECT p.FirstName, p.LastName, p.Age FROM Tickets AS t
RIGHT JOIN Passengers AS p ON t.PassengerId = p.Id
WHERE t.Id IS NULL
ORDER BY Age DESC, FirstName, LastName

SELECT CONCAT(FirstName, ' ', LastName) AS [Full Name],
pl.Name AS [Plane Name],
CONCAT (Origin, ' - ', Destination) AS [Trip],
lt.Type AS [Luggage Type]
FROM Tickets AS t
JOIN Passengers AS p ON t.PassengerId = p.Id
JOIN Flights AS f ON t.FlightId = f.Id
JOIN Luggages AS l ON t.LuggageId = l.Id
JOIN LuggageTypes AS lt ON l.LuggageTypeId = lt.Id
JOIN Planes AS pl ON f.PlaneId = pl.Id
ORDER BY [Full Name], pl.Name, Origin, Destination, lt.Type

SELECT p.Name, p.Seats, COUNT(t.PassengerId) AS [Passangers Count] FROM Tickets AS t
JOIN Flights AS f ON t.FlightId = f.Id
RIGHT JOIN Planes AS p ON f.PlaneId = p.Id
GROUP BY p.Name, p.Seats
ORDER BY [Passangers Count] DESC, p.Name, Seats

CREATE FUNCTION udf_CalculateTickets(@origin VARCHAR(50), @destination VARCHAR(50), @peopleCount INT) 
RETURNS VARCHAR(100)
AS
BEGIN
	IF(@peopleCount <= 0)
	RETURN 'Invalid people count!'

	DECLARE @tripId INT = (SELECT f.Id FROM Tickets AS t 
		JOIN Flights AS f ON t.FlightId = f.Id
			WHERE Origin = @origin AND Destination = @destination)

	IF(@tripId IS NULL)
	RETURN 'Invalid flight!'

	DECLARE @result DECIMAL(15,2) = (SELECT t.Price FROM Tickets AS t
						JOIN Flights AS f ON t.FlightId = f.Id
							WHERE Origin = @origin AND Destination = @destination)
	SET @result *= @peopleCount
	
	RETURN 'Total price ' + CAST(@result AS VARCHAR(30))
END

SELECT dbo.udf_CalculateTickets('Kolyshley','Rancabolang', 33)
SELECT dbo.udf_CalculateTickets('Kolyshley','Rancabolang', -1)
SELECT dbo.udf_CalculateTickets('Invalid','Rancabolang', 33)

CREATE PROCEDURE usp_CancelFlights
AS
	UPDATE Flights
SET DepartureTime = NULL, ArrivalTime = NULL
WHERE ArrivalTime > DepartureTime
GO
